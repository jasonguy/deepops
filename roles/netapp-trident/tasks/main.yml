---
# tasks file for netapp-trident role
# the tridentctl utility will interface remotely with the k8s cluster

- name: Download and extract Trident installer
  include: tridentctl.yml

- name: Copy namespace config file to control node
  template:
    src: namespace.j2
    dest: '{{ artifacts_dir }}/trident-installer/namespace.yaml'
    mode: "0644"

- name: Create Trident namespace
  kube:
    state: present
    resource: Namespace
    name: trident
    filename: '{{ artifacts_dir }}/trident-installer/namespace.yaml'

- name: Install Trident using Helm
  command: '/usr/local/bin/helm -n {{ trident_namespace }} install trident {{ artifacts_dir }}/trident-installer/helm/trident-operator-{{ trident_version }}.tgz'
  changed_when: false

- name: Copy backend config file(s) to control node
  template:
    src: backend.j2
    dest: '{{ artifacts_dir }}/trident-installer/backend-{{ item.backendName }}.json'
    mode: "0644"
  with_items: '{{ backends_to_create }}'
  when: create_backends

- name: Create Trident backend(s)
  command: '{{ artifacts_dir }}/trident-installer/tridentctl -n {{ trident_namespace }} create backend -f {{ deepops_dir }}/trident-installer/backend-{{ item.backendName }}.json'
  with_items: '{{ backends_to_create }}'
  retries: 10
  delay: 30
  register: result
  until: result.rc == 0
  when: create_backends

- name: Copy StorageClass config file(s) to control node
  copy:
    content: '{{ item }}'
    dest: '{{ artifacts_dir }}/trident-installer/sc-{{ item.metadata.name }}.yaml'
    mode: "0644"
  with_items: '{{ storageClasses_to_create }}'
  when: create_StorageClasses

- name: Create StorageClasses
  kube:
    state: present
    resource: StorageClass
    name: '{{ item.metadata.name }}'
    filename: '{{ artifacts_dir }}/trident-installer/sc-{{ item.metadata.name }}.yaml'
  with_items: '{{ storageClasses_to_create }}'
  when: create_StorageClasses

- name: Create volume snapshot CRDs
  kube:
    state: present
    filename: '{{ item }}'
  with_items: '{{ volume_snapshot_CRD_manifest_URLs }}'
  when: enable_volume_snapshots

- name: Create snapshot controller
  kube:
    state: present
    filename: '{{ item }}'
  with_items: '{{ snapshot_controller_manifest_URLs }}'
  when: enable_volume_snapshots

- name: Copy volume snapshot class config file(s) to control node
  copy:
    content: '{{ item }}'
    dest: '{{ artifacts_dir }}/trident-installer/snapclass-{{ item.metadata.name }}.yaml'
    mode: "0644"
  with_items: '{{ volume_snapshot_classes_to_create }}'
  when: enable_volume_snapshots

- name: Create volume snapshot classes
  kube:
    state: present
    resource: VolumeSnapshotClass
    name: '{{ item.metadata.name }}'
    filename: '{{ artifacts_dir }}/trident-installer/snapclass-{{ item.metadata.name }}.yaml'
  with_items: '{{ volume_snapshot_classes_to_create }}'
  when: enable_volume_snapshots
